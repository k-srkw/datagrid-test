apiVersion: 1.0.0
metadata:
  name: datagrid-tutorials
attributes:
  persistVolumes: 'false'
projects:
  - name: redhat-datagrid-tutorials
    source:
      location: 'https://github.com/redhat-developer/redhat-datagrid-tutorials.git'
      startPoint: RHDG_8.3.1
      type: git
  - name: datagrid-test
    source:
      location: 'https://github.com/k-srkw/datagrid-test.git'
      startPoint: main
      type: git
components:
  - id: redhat/java11/latest
    preferences:
      java.server.launchMode: Standard
    type: chePlugin
  - id: redhat/dependency-analytics/latest
    type: chePlugin
  - mountSources: true
    endpoints:
      - name: health-checks-endpoint
        port: 8080
    memoryLimit: 512Mi
    type: dockerimage
    volumes:
      - name: m2
        containerPath: /home/jboss/.m2
    alias: maven
    image: 'registry.redhat.io/codeready-workspaces/plugin-java11-rhel8@sha256:79b59596870382e968850bc241ac41a3345a9079f28251808e35479f92bd3b86'
    env:
      - value: '-XX:MaxRAMPercentage=50.0 -XX:+UseParallelGC -XX:MinHeapFreeRatio=10 -XX:MaxHeapFreeRatio=20 -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -Dsun.zip.disableMemoryMapping=true -Xms20m -Djava.security.egd=file:/dev/./urandom -Duser.home=/home/jboss'
        name: JAVA_OPTS
      - value: $(JAVA_OPTS)
        name: MAVEN_OPTS
  - id: redhat/vscode-xml/latest
    type: chePlugin
  - id: redhat/vscode-yaml/latest
    type: chePlugin
  - id: vscode/typescript-language-features/latest
    type: chePlugin
commands:
  - name: 1. Build
    actions:
      - workdir: '${CHE_PROJECTS_ROOT}/vertx-health-checks-example-redhat'
        type: exec
        command: mvn clean install
        component: maven
  - name: 2. Build and run
    actions:
      - workdir: '${CHE_PROJECTS_ROOT}/vertx-health-checks-example-redhat'
        type: exec
        command: 'mvn clean install && mvn -Dvertx.disableDnsResolver=true vertx:run'
        component: maven
  - name: 3. Run in debug mode
    actions:
      - workdir: '${CHE_PROJECTS_ROOT}/vertx-health-checks-example-redhat'
        type: exec
        command: 'mvn -DskipTests vertx:debug'
        component: maven
  - name: 4. Run tests
    actions:
      - workdir: '${CHE_PROJECTS_ROOT}/vertx-health-checks-example-redhat'
        type: exec
        command: mvn verify
        component: maven
  - name: 5. Log into deployment cluster
    actions:
      - workdir: '${CHE_PROJECTS_ROOT}/vertx-health-checks-example-redhat'
        type: exec
        command: |
          echo
          echo "Before you can deploy this application to an openshift cluster,"
          echo "you must run 'oc login ...' in the maven terminal."
          echo
        component: maven
  - name: 6. Deploy to OpenShift
    actions:
      - workdir: '${CHE_PROJECTS_ROOT}/vertx-health-checks-example-redhat'
        type: exec
        command: 'mvn fabric8:deploy -Popenshift -DskipTests -Dvertx.disableDnsResolver=true'
        component: maven
  - name: Debug remote java application
    actions:
      - referenceContent: |
          {
           "version": "0.2.0",
           "configurations": [
             {
               "type": "java",
               "name": "Debug (Attach) - Remote",
               "request": "attach",
               "hostName": "localhost",
               "port": 5005
             }]
           }
        type: vscode-launch
